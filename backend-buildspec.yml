version: 0.2
env:
  parameter-store:
    DATABASE_USER: "DATABASE_USER"
    DATABASE_NAME: "DATABASE_NAME"
    DATABASE_PASSWORD: "DATABASE_PASSWORD"
    DATABASE_ENDPOINT: "DATABASE_ENDPOINT"
    AWS_REGION: "AWS_REGION"
    AWS_ACCOUNT_ID: "AWS_ACCOUNT_ID"
    REPOSITORY_NAME: "REPOSITORY_NAME"
    CONTAINER_NAME: "CONTAINER_NAME"
phases:
  install:
    runtime-versions:
      nodejs: 21.6.1
    commands:
      - echo "Install phase"
      - cd ./backend
      - chmod +x ./scripts/upload-container-env.sh
      - echo "Building backend"
      - npm install
      - npm install -g dotenv-cli
  pre_build:
    commands:
      # - DATABASE_USER=$(aws ssm get-parameter --name "DATABASE_USER" --query Parameter.Value --with-decryption --output text)
      # - DATABASE_NAME=$(aws ssm get-parameter --name "DATABASE_NAME" --query Parameter.Value --with-decryption --output text)
      # - DATABASE_PASSWORD=$(aws ssm get-parameter --name "DATABASE_PASSWORD" --query Parameter.Value --with-decryption --output text)
      # - DATABASE_ENDPOINT=$(aws ssm get-parameter --name "DATABASE_ENDPOINT" --query Parameter.Value --with-decryption --output text)
      - DATABASE_URL=postgresql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_ENDPOINT/$DATABASE_NAME
      # - AWS_REGION=$(aws ssm get-parameter --name "_AWS_REGION" --query Parameter.Value --with-decryption --output text)
      # - AWS_ACCOUNT_ID=$(aws ssm get-parameter --name "_AWS_ACCOUNT_ID" --query Parameter.Value --with-decryption --output text)
      # - REPOSITORY_NAME=$(aws ssm get-parameter --name "REPOSITORY_NAME" --query Parameter.Value --with-decryption --output text)
      - echo Logging in to Amazon ECR...
      - aws --version
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}

  build:
    commands:
      - echo "Generating Prisma client"
      - cd ./src/data/models
      - npx prisma generate
      - echo "Performing database migration"
      - npx dotenv -v DATABASE_URL="$DATABASE_URL" -- npx prisma migrate deploy
      - cd ../../../
      - echo "Running unit tests"
      - npm run test
      - echo "Building Docker image..."
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      # - CONTAINER_NAME=$(aws ssm get-parameter --name "CONTAINER_NAME" --query Parameter.Value --with-decryption --output text)
      - printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
      - echo "Updating container environment file"
      - ./scripts/upload-container-env.sh
artifacts:
    files: imagedefinitions.json
    base-directory: backend
