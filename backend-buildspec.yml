version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 21.6.1
    commands:
      - echo "Install phase"
      - cd ./backend
      - echo "Building backend"
      - npm install
      - npm install -g dotenv-cli
      - echo "Starting Docker daemon"
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
  pre_build:
    commands:
      - DATABASE_URL=$(aws ssm get-parameter --name "DATABASE_URL" --query Parameter.Value --output text)
      - if [ -z "$DATABASE_URL" ]; then echo "Error:Failed to retrieve DATABASE_URL from AWS SSM"; exit 1; fi
      - AWS_REGION=$(aws ssm get-parameter --name "_AWS_REGION" --query Parameter.Value --output text)
      - AWS_ACCOUNT_ID=$(aws ssm get-parameter --name "_AWS_ACCOUNT_ID" --query Parameter.Value --output text)
      - REPOSITORY_NAME=$(aws ssm get-parameter --name "REPOSITORY_NAME" --query Parameter.Value --output text)
      - echo Logging in to Amazon ECR...
      - aws --version
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}

  build:
    commands:
      - echo "Generating Prisma client"
      - cd ./src/data/models
      - npx prisma generate
      - echo "Performing database migration"
      - npx dotenv -v DATABASE_URL="$DATABASE_URL" -- npx prisma migrate deploy
      - cd ../../../
      - echo "Running unit tests"
      - npm run test
      - echo "Building backend..."
      - npm run build
      - echo "Building Docker image..."
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
artifacts:
  name: backend-artifact
  files:
    # - appspec.yml
    - backend/dist/**/*
    # - scripts/**/*
    # - package.json
    # - tsconfig.json
  # base-directory: 'backend'
